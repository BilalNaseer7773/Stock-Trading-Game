Overview


Welcome to our stock trading game project! This application allows users to experience the excitement and challenges of stock trading in a simulated environment. By integrating real-time data from the New York Stock Exchange (NYSE), users can make virtual investments, manage their portfolio, and track market trends.

Features

Real-time Stock Data: Our game utilizes real-time data from the NYSE to ensure an authentic trading experience.
User Authentication: Implemented user authentication to ensure secure access to the platform.
Intuitive Interface: Designed a user-friendly interface using HTML for seamless portfolio management and trading.
Backend Processing: Utilized .NET for backend tasks such as data processing, ensuring smooth operation of the application.
Swift Market Updates: Leveraged Node.js for real-time updates, allowing quick responses to market changes and ensuring a dynamic trading environment.
Technologies Used

.NET: Used for backend development, including data processing and user authentication.
Node.js: Employed for real-time updates, enabling swift responses to market changes.
HTML: Utilized for intuitive portfolio management and interface design.
Other Technologies: Additionally, we integrated various other technologies and libraries to enhance the user experience and ensure smooth operation.

Note:
The implementation of this project cannot be made public as it is an academic project and currently in progress. Once completed I will be attach screenshots of the final version of it.








# Project (3rd Part)
## CS3100 W2024. <br>
## Project Description
This project is a web-based application designed to mimic a real life stock game. It consists of both server-side and client-side components.

Demo Video
The demo video showcasing the features of the application can be found here: https://drive.google.com/drive/folders/1f3lDLQbDzNh1boKlyYRjgOZ6tBfLiJ3d?usp=sharing <br>

So for this projecct there were very minor changes to my backend/server code and hence I did not find the need to re-write the unit tests the previous unit tests should be sufficient.<br>

In terms of structuring my code I have kept it very simple. I added another folder within the porjects folder with the name of "Frontend:GUI", this folder has 4 HTML file:<br><br>

1) CreateGame.html: <br>
The page contains two forms: one for creating a game and another for joining a game.<br>
Each form includes input fields for relevant information such as username, game ID, and game status.<br>
Users can select the game status from a dropdown menu in the create game form.<br>
JavaScript functions createGame(event) and joinGame(event) are used to handle form submissions asynchronously via fetch requests to the server.<br>
The createGame(event) function sends a POST request to the server to create a new game, while the joinGame(event) function sends a POST request to join an existing game.<br>
Upon successful response from the server, the user is redirected to the GameDashboard.html page.<br>
Error handling is implemented to display alerts for unsuccessful requests or network errors.<br><br>
<img width="466" alt="image" src="https://github.com/CS3100W24/project-BilalNaseer7773/assets/90666694/046e55cf-b8ac-4e82-9162-53b106b9e554">
<br><br>


2) GameDashboard.html: <br>
The page layout is styled using CSS to create a visually appealing interface.<br>
The dashboard includes forms for buying and selling stocks, viewing transaction history, and showing player portfolios.<br>
JavaScript functions are used to handle form submissions asynchronously via fetch requests to the server.<br>
The buyStock(event) function sends a POST request to buy stocks, sellStock(event) function sends a POST request to sell stocks, showTransactions(event) function sends a POST request to view transaction history, showPlayerPortfolio(event) function sends a POST request to show player portfolios, and endGame(event) function sends a POST request to end the game.<br>
Upon successful response from the server, relevant alerts are displayed to the user.<br>
Error handling is implemented to handle unsuccessful requests or network errors.<br><br>
<img width="1448" alt="image" src="https://github.com/CS3100W24/project-BilalNaseer7773/assets/90666694/30804400-3598-4f3d-af57-70b56a3b936c">
<img width="457" alt="image" src="https://github.com/CS3100W24/project-BilalNaseer7773/assets/90666694/71014ea5-6549-4aaf-9ec4-0da4e390f9f7">
<img width="469" alt="image" src="https://github.com/CS3100W24/project-BilalNaseer7773/assets/90666694/d9cb7040-273f-432c-a31d-5ff6b2e84830">
<img width="448" alt="image" src="https://github.com/CS3100W24/project-BilalNaseer7773/assets/90666694/9323f8aa-cc92-4aed-8491-24bc965e4247">
<img width="439" alt="image" src="https://github.com/CS3100W24/project-BilalNaseer7773/assets/90666694/7faafe98-e269-4560-8f15-f0b14f2a4b72">
<img width="451" alt="image" src="https://github.com/CS3100W24/project-BilalNaseer7773/assets/90666694/fd5b38e6-6561-4404-9166-e89d35143252">


<br><br>


3) Registration.html: <br>
It includes a form for users to register with a username, password, and an optional checkbox for admin privileges.<br>
JavaScript functions are used to handle form submissions asynchronously via fetch requests to the server.<br>
The registerUser(event) function sends a POST request to register a new player, capturing the entered username, password, and admin status.<br>
Upon successful response from the server, an alert is displayed indicating successful registration.<br>
Error handling is implemented to display an alert if registration fails or if there are network errors.<br>
Additionally, there's a "Proceed" button that redirects users to the login page once all players are registered.<br><br>
<img width="1445" alt="image" src="https://github.com/CS3100W24/project-BilalNaseer7773/assets/90666694/f803590c-8307-46bf-8065-ca081d702d5f">
<img width="480" alt="image" src="https://github.com/CS3100W24/project-BilalNaseer7773/assets/90666694/46c300da-da50-4303-84af-b351afc4eacd">

<br><br>

4) Login.html: <br>
It includes a form for users to log in with their username and password.<br>
JavaScript function loginUser(event) is used to handle form submissions asynchronously via fetch requests to the server.<br>
The loginUser(event) function sends a POST request to authenticate the user with the entered username and password.<br>
Upon successful response from the server, the user is redirected to the "CreateGame.html" page.<br>
Error handling is implemented to display an alert if the username or password is incorrect, or if there are network errors.<br>
Additionally, there's a link for new players to register if they don't have an account yet.<br><br>
<img width="665" alt="image" src="https://github.com/CS3100W24/project-BilalNaseer7773/assets/90666694/469d9cca-44e9-43a0-b554-54305a277f1e">
<br><br>


## To keep it simple and easy to understand I ahve incorporated css and javascript within the html files.

## UNIT TESTS:
They will be the same as in the 2nd part of the project so you can scroll down for those.


# Project (2nd Part)
## CS3100 W2024.

## Port
In this project the port has been set to: "localhost:8820".

## Instructions
Flow of the game using the HTTP requests:
1) playerRegistration: register all the players that you want.
2) loginPlayer: login all the players that want to play the game.
3) createGame: Creates a game document with all the players added to the players list.
4) startGame: Start the game by resetting the balance, stocks and transactions to there default values.
5) buyStock: During the game a player can use this request to buy any stocks if they have sufficient balance.
6) sellStock: During the game a player can use this request to buy any stocks if they have sufficient balance.
7) endGame: This will end the game and declare a winner.
8) showTransactions: This is the added feature that will allow any player to access all the transaction hisory of any player.
9) showPlayerPortfolio: This is the second added feature, it takes as input the the username and displays the cpmplete portfolio of that player be it the name, balance, whether they are admin or not, stocks they have at the moment, their complete transaction history as well.

## Layout
The layout for this project is quite simialr to the 3rd assignment there's a server that has all the functions related to the HTTP requests which are in the stockApp. There are 2 classes "users" and "game" as suggested by the name the "users" class deals with the players information and keeps track of all the data and "game" deals with the game that is being played. All the files are present in the same folder as it is simialr to assignment 3 repo so it was quite straight forward and I did not make any changes to that, the tests have also been included into the same repo.

## Architecture
Overall, this file follows a modular architecture, separating concerns related to player management, game management, database operations, and external API interactions. It provides a structured approach to handling various aspects of the financial trading application. <br>
The stockApp follows a typical Express application structure, with middleware, route handlers, database connection management, and server startup/shutdown logic organized in a modular and maintainable manner.

## Database
For this project I am utilizing mongoDB and have a database called "ProjectCOMP3100" and 2 collections: "users" and "game".

### users
In this database I store all the registered players and there information such as:
1) username
2) password
3) balance (amount left in the player's bank)
4) loggedIn (whether a player is logged in or not)
5) stocks (A list of stocks object that stores the symbol of stocks and quantity of stocks bought)
6) transaction (A list of transactions that the player has performed)


### game
In this database the following are stored in each document:
1) gameID
2) gameStatus (Game is being played/created/waiting)
3) players (A list of players who are playing the game).

## HTTP Requests
1) "/playerRegistration"
This takes as input:
-> "username": username of the player 
-> "password": password of the player 
-> "admin": whther the player is admin or not (True/False)
Adds a player document to the "users" collection with the above details and sets the balance to "1000".

2) "/loginPlayer"
This takes as input:
-> "username": username of the player 
-> "password": password of the player 
This http request takes as input the username and password and matches it to the values stored in the collection and sets the loggedIn to true.

3) "/buyStock"
This takes as input:
-> "username": username of the player 
-> "stockSymbol": symbol of the stock
-> "quantity": quantity/number of stocks to buy
This http request takes as input the player's username who wants to buy stocks, as well as the symbol and quantity of stocks to buy. It is then verified if the player has enoughs balance to buy these stocks if so the balance is updated and also the stocks and transactions list is updated.

4) "/sellStock"
This takes as input:
-> "username": username of the player 
-> "stockSymbol": symbol of the stock
-> "quantity": quantity/number of stocks to buy
This http request takes as input the player's username who wants to sell the stocks, as well as the symbol and quantity of stocks to sell. It is then verified if the player has enoughs stocks to sell if so the balance is updated and also the stocks and transactions list is updated.

5) "/showTransactionHistory"
This takes as input:
-> "username": username of the player 
This HTTP request is one of the added features that takes the player's username and show all the buying and selling transaction performed by that player.

6) "/createGame"
This takes as input:
-> "username": username of the player 
-> "gameID": ID for the game
-> "gameStatus": status of the game: active/waiting/being played
This http request traverses through the users collection and adds all the players who are currently logged in into the game.


7) "/startGame"
This takes as input:
-> "gameID": ID for the game
This http request takes the game ID as input and for that particular game resets the balance, stocks list and transactions list.

8) "/endGame"
This takes as input:
-> "username: username of the player
-> "gameID": ID for the game
This http request ensures that the player ending the game is an admin, once that is verified the valuation for each player is calculated to find out which player has the maximum value and that player is declared the winner.

9) "/showPlayerPortfolio"
This takes as input:
-> "username": player's name
This http request takes the username as input and for that particular player displays their postfolio

## Testing
For the purpose of testing I have used mock data and you can run the tests by running the following command:  <br>
"mocha tests.mjs". <br>
You should get the following results:

<img width="1200" alt="image" src="https://github.com/CS3100W24/project-BilalNaseer7773/assets/90666694/e81f7ff4-82cb-4ab7-95a9-1f69ba8b4d4c">
showPlayerPortfolio was added later on hence that is why I added a couple additional unit tests which are also passing as you can see.
<img width="1030" alt="image" src="https://github.com/CS3100W24/project-BilalNaseer7773/assets/90666694/128b66a5-bac7-4c8c-95d3-4e44ba5478a1">

For the unit test when you run the above mentioned command and as shown in the screenshot above the unit test for each HTTP reuest is labelled so that should be rather straight forward for anyone to understand.

### The postman tests are as follows:
1) playerRegistration
<img width="1039" alt="image" src="https://github.com/CS3100W24/project-BilalNaseer7773/assets/90666694/708dce80-4b5a-4be3-80db-66d994813f61">
<img width="1068" alt="image" src="https://github.com/CS3100W24/project-BilalNaseer7773/assets/90666694/c3485be5-a0c1-4c62-876b-a8309660dca2">


2) loginPlayer
 <img width="1080" alt="image" src="https://github.com/CS3100W24/project-BilalNaseer7773/assets/90666694/5b6abdbd-adba-4365-b475-92f8d873c229">

3) buyStock
<img width="1059" alt="image" src="https://github.com/CS3100W24/project-BilalNaseer7773/assets/90666694/5c4b0c4b-5579-4479-a480-9c98795a8502">

4) sellStock
 <img width="1069" alt="image" src="https://github.com/CS3100W24/project-BilalNaseer7773/assets/90666694/e356f4b0-42f4-4e76-b5b3-74f56d9f2ec6">

5) showTransactionHistory
<img width="1044" alt="image" src="https://github.com/CS3100W24/project-BilalNaseer7773/assets/90666694/11058af9-c7f5-4dee-85d9-0fdd6ddb3c78">

6) createGame
<img width="1049" alt="image" src="https://github.com/CS3100W24/project-BilalNaseer7773/assets/90666694/a0ffd536-39f1-46e5-8361-a58d8e0e9145">

7) startGame
<img width="1065" alt="image" src="https://github.com/CS3100W24/project-BilalNaseer7773/assets/90666694/16ee9c3a-ba4a-456d-b9a0-4fc388351a76">

8) endGame
<img width="1060" alt="image" src="https://github.com/CS3100W24/project-BilalNaseer7773/assets/90666694/63ffe485-b758-4c04-85d8-658ffddd6d78">

9) showPlayerPorfolio
<img width="1072" alt="image" src="https://github.com/CS3100W24/project-BilalNaseer7773/assets/90666694/2ce5cc75-6e5c-481d-8871-4aa6166d1b16">

## MongoDB
<img width="1451" alt="image" src="https://github.com/CS3100W24/project-BilalNaseer7773/assets/90666694/5e89b454-f144-445b-8fb6-a096ed517ac8">
<img width="1469" alt="image" src="https://github.com/CS3100W24/project-BilalNaseer7773/assets/90666694/6415213f-8fd0-453d-ba97-bd101bddc00a">


### Side Note
Due to the limited number of API calss allowed I have only showed the postman results for few buy and sell transaction but enough to display that my buyStock and sellStock requests both work they way they are supposed to work.
